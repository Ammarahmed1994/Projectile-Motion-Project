<!doctype html>

<html lang="en">

<head>
    <meta charset="utf-8">

    <title>Nagwa</title>
    <meta name="description" content="The HTML5 Herald">
    <meta name="author" content="SitePoint">
    <!-- CSS only -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossorigin="anonymous">

    <style>
        * {
            box-sizing: border-box;
        }

        body::after {
            content: "";
            background: url(https://cdn.hipwallpaper.com/i/20/6/MJfjbL.jpg);
            opacity: 0.1;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            position: absolute;
            z-index: -1;
        }

        h1 {
            color: red
        }

        #myCanvas {
            border: 2px solid;
            background-color: yellow;
        }

        #floatRight {
            float: right;
        }

        .column {
            float: left;
            width: 50%;
            padding: 10px;
            font-family: 'Times New Roman', serif;
            font-weight: 1000;
        }
    </style>

</head>

<body>

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top" id="mainNav">
        <div class="container-fluid">
            <a class="navbar-brand js-scroll-trigger" style="margin-left: 40px;">Projectile Motion</a>
        </div>
    </nav>
    <div>


        <div class="container" style="margin-top: 60px;">
            <div class="row">
                <h3 style="text-align: center;   font-family: 'Times New Roman', serif;" class="col-md-9">This is a demo
                    of the Projectile Motion, once you enter a velocity and
                    an angle, the Projectile will be
                    shown below and you can see the Maximum Displacement and the Maximum Height</h3>
                <div class="column">
                    <label for="velocity">Veloctiy (m/s)</label>
                    <div class="col-md-2">
                        <input type="text" class="form-control" placeholder="" id="velocity">
                    </div>
                    <label for="angle">Angle (degree)</label>

                    <div class="col-md-2">
                        <input type="text" class="form-control" placeholder="" id="angle">
                    </div>
                    <br />

                    <button type="button" class="btn btn-primary btn-lg" id="launch">Launch</button>

                </div>

                <div class="column">

                    <label>Maximum Displacement(m)</label>
                    <div class="col-md-3">
                        <input type="text" class="form-control" id="maxDisplacement">
                    </div>

                    <label>Maximum Height (m)</label>
                    <div class="col-md-3">
                        <input type="text" class="form-control" id="maxHeight">
                    </div>
                    <br />

                    <button type="button" class="btn btn-danger btn-lg" id="reset">Reset</button>

                </div>
            </div>

            <br />

            <canvas id="myCanvas" width="1000" height="500"></canvas>

        </div>

        <script>
            var canvas = document.getElementById("myCanvas");
            var ctx = canvas.getContext("2d");

            function setUpTheCanvas() {
                ctx.font = "20px Arial";
                ctx.fillText("X-axis", 940, 480);
                ctx.fillText("Y-axis", 10, 20);
            }
            setUpTheCanvas();

            class Ball {
                constructor(positionP, velocityP, accelerationP, radiusP, contextP, colorP) {
                    this.radius = radiusP;
                    this.context = contextP;
                    this.color = colorP;

                    this.position = {
                        x: positionP.x,
                        y: positionP.y
                    }

                    this.velocity = {
                        x: velocityP.x,
                        y: velocityP.y
                    }

                    this.acceleration = {
                        x: 0,
                        y: accelerationP / 60
                    }
                }

                draw() {
                    this.context.beginPath();
                    this.context.arc(this.position.x, this.position.y, this.radius, 0, 2 * Math.PI);
                    this.context.fill();
                    this.context.fillStyle = this.color;
                }

                move() {
                    this.velocity.x += this.acceleration.x;
                    this.velocity.y += this.acceleration.y;

                    this.position.x += this.velocity.x;
                    this.position.y -= this.velocity.y;
                }
            }

            let launchBtn = document.getElementById("launch");
            let reset = document.getElementById("reset");
            let inputVelocity = document.getElementById("velocity");
            let inputAngle = document.getElementById("angle");


            let Balls = [];

            launchBtn.addEventListener('click', () => {
                performManuaLaunch();
            });

            reset.addEventListener('click', () => {
                clearScreen();
            });

            var originBalls = {
                x: 0,
                y: canvas.height - 1
            }


            window.requestAnimationFrame(loop);
            function loop() {
                for (let i = Balls.length - 1; i >= 0; i--) {
                    Balls[i].draw();
                    Balls[i].move();
                }
                for (let i = Balls.length - 1; i >= 0; i--) {
                    let ball = Balls[i];
                    if (ball.position.y > canvas.height) {
                        Balls.filter((ball) => {
                            return ball.position.y <= canvas.height
                        });
                    }
                }

                window.requestAnimationFrame(loop);
            }


            function performManuaLaunch() {
                let launchData = createManualBall();
                let { ball, velocities, maxHeight, maxDisplacement } = launchData;

                showManualData(velocities, maxHeight, maxDisplacement);
                Balls.push(ball);
            }

            function createManualBall() {
                let mTime, maxDisplacement, maxHeight, mBall;

                let angle = parseFloat(inputAngle.value);
                let velocity = parseFloat(inputVelocity.value);
                let G = -9.807;  //Gravity
                let velY = Math.sin((angle * Math.PI) / 180) * velocity;
                let velX = Math.cos((angle * Math.PI) / 180) * velocity;

                // time
                mTime = Math.abs(velY / G) * 2;
                mTime = mTime.toFixed(3);

                // max range 
                maxDisplacement = (velX * mTime).toFixed(0);

                // maximum height 
                maxHeight = Math.abs((velY * velY) / (2 * G)).toFixed(2);

                mBall = new Ball(originBalls, {
                    x: velX,
                    y: velY
                }, G, 5, ctx, "red");

                return {
                    maxDisplacement,
                    maxHeight,
                    velocities: { x: velX, y: velY },
                    ball: mBall
                }
            }

            function showManualData(velocities, maxHeight, maxDisplacement) {
                document.getElementById('maxHeight').value = parseFloat(maxHeight).toFixed(2);
                document.getElementById('maxDisplacement').value = parseFloat(maxDisplacement).toFixed(2);
            }

            function clearScreen() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                setUpTheCanvas();
                document.getElementById("velocity").value = ``;
                document.getElementById("angle").value = ``;
                document.getElementById('maxHeight').value = ``;
                document.getElementById('maxDisplacement').value = ``;
            }

        </script>
        <!-- JavaScript Bundle with Popper -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4"
            crossorigin="anonymous"></script>

</body>

</html>